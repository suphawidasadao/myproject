import { NextResponse } from "next/server";
import { connectMongoDB } from "@/lib/mongodb";
import User from "@/models/user";
import bcrypt from "bcryptjs";

export async function POST(req) {
    try {
        const { firstname, lastname, name, email, password, phone } = await req.json();
        console.log("üì¶ Received Data:", { firstname, lastname, name, email, phone });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô String ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (typeof name !== "string") {
            throw new Error(`‚ùå name ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô String ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤: ${typeof name}`);
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        await connectMongoDB();

        const newUser = new User({
            firstname,
            lastname,
            name,
            email,
            phone,
            password: hashedPassword,
            role: email === "admin@gmail.com" ? "admin" : "user"
        });

        console.log("‚úÖ Saving User:", newUser);

        await newUser.save();

        return NextResponse.json({ message: "User registered." }, { status: 201 });

    } catch (error) {
        console.error("‚ùå Registration Error:", error);
        return NextResponse.json(
            { message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", error: error.message },
            { status: 500 }
        );
    }
}
